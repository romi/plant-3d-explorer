{"version":3,"sources":["/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/rd/tools/promise.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/rd/tools/hooks/fetch.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/rd/tools/hooks/fetch3dObject.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/common/thiers/PLYLoader.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/rd/tools/enhancers.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/common/api/index.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/flow/scans/enhancers.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/flow/scans/accessors.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/flow/scans/reducer.js","/home/runner/work/plant-3d-explorer/plant-3d-explorer/src/rd/tools/hooks/accessor.js"],"names":["MakeQuerablePromise","promise","isResolved","isPending","isRejected","isFulfilled","result","then","v","e","cache","forgeFetchResource","url","source","options","data","query","get","useFetch","cached","cachedData","error","setError","useState","loading","setLoading","setData","useEffect","unmounted","response","CancelToken","fetchResource","catch","console","log","Error","cancel","enhancedTHREE","THREE","PLYLoader","manager","this","undefined","DefaultLoadingManager","propertyNameMapping","prototype","constructor","load","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","text","parse","value","setPropertyNameMapping","mapping","parseHeader","headerText","headerLength","exec","length","currentElement","lineType","lineValues","propertValues","property","header","comments","elements","lines","split","i","line","trim","shift","join","format","version","push","name","count","parseInt","properties","type","countType","itemType","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","body","currentElementCount","handleElement","postProcess","geometry","BufferGeometry","setIndex","addAttribute","Float32BufferAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","ArrayBuffer","LoaderUtils","decodeText","Uint8Array","DataView","loc","parseBinary","loadAsync","Promise","resolve","reject","err","useFetch3dObject","chain","fns","reduce","p","c","ifNotNil","fn","args","filter","first","scansURIQuery","search","getScanFile","id","getFile","getScanURI","getScanPhotoURI","imgLoader","crossOrigin","relativeScanPhotoURIEnhancer","scan","camera","poses","map","d","photoUri","relativeScansPhotoURIEnhancer","scans","thumbnailUri","relativeScansFilesURIEnhancer","metadata","files","archive","metadatas","relativeScanFilesURIEnhancer","forgeCameraPointsEnhancer","index","orderBy","point","m3rotation","set","rotmat","transpose","multiplyScalar","v3position","tvec","applyMatrix3","createM4Rot","m4rotation","objM4rotation","objT","makeRotationX","Math","PI","multiply","vueM4rotation","vueT","fileName","last","forgeImageSetEnhancer","imageSet","texture","useScan","match","useReactRouter","selectedId","params","scanId","scanData","useMemo","useImageSet","fileset","filesets","find","toLowerCase","file","useFile","rawFileName","useSegmentedPointCloud","pointCloud","use3dFile","segmentation","useScanFiles","filesUri","mesh","pcdGroundTruth","useScans","useSearchQuery","useAccessor","state","searchQuery","useSorting","sorting","sortingMethods","label","useSortingMethod","useFiltering","filtering","method","defaultMethod","initialState","settingsReducer","action","accessor","selectors","actions","props","dispatch","useDispatch","selector","useMappedState","useCallback"],"mappings":"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","file":"static/js/doc-fetching-data~src-viewer-interactors-index.ef9b8051.js","sourcesContent":["/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\n// from https://ourcodeworld.com/articles/read/317/how-to-check-if-a-javascript-promise-has-been-fulfilled-rejected-or-resolved\n\nexport function MakeQuerablePromise (promise) {\n  // Don't modify any promise that has been already modified.\n  if (promise.isResolved) return promise\n\n  // Set initial state\n  var isPending = true\n  var isRejected = false\n  var isFulfilled = false\n\n  // Observe the promise, saving the fulfillment in a closure scope.\n  var result = promise.then(\n    function (v) {\n      isFulfilled = true\n      isPending = false\n      return v\n    },\n    function (e) {\n      isRejected = true\n      isPending = false\n      throw e\n    }\n  )\n\n  result.isFulfilled = function () { return isFulfilled }\n  result.isPending = function () { return isPending }\n  result.isRejected = function () { return isRejected }\n  return result\n}\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\nimport { useState, useEffect } from 'react'\nimport { get, CancelToken } from 'axios'\n\nimport { MakeQuerablePromise } from 'rd/tools/promise'\n\nconst cache = {}\n\nfunction forgeFetchResource (url, source, options) {\n  return {\n    data: null,\n    query: MakeQuerablePromise(\n      get(url)\n    )\n  }\n}\n\nconst useFetch = (url, cached = true, options = {}) => {\n  const cachedData = (cached && cache[url])\n  const [error, setError] = useState(null)\n  const [loading, setLoading] = useState(!!cachedData || true)\n  const [data, setData] = useState(\n    cache[url]\n      ? cache[url].query.isFulfilled\n        ? cache[url].data\n        : null\n      : false\n  )\n\n  useEffect(() => {\n    let source\n    let unmounted = false\n    if (url) {\n      if (cached && cache[url]) {\n        if (cache[url].data) {\n          setLoading(false)\n          setData(cache[url].data)\n        } else {\n          cache[url].query\n            .then((response) => {\n              setLoading(false)\n              setData(response.data)\n            })\n        }\n      } else {\n        setData(null)\n        setLoading(true)\n        source = CancelToken.source()\n        const fetchResource = forgeFetchResource(url, source, options)\n\n        if (cached) cache[url] = fetchResource\n\n        fetchResource.query\n          .then((response) => {\n            if (!unmounted) {\n              if (cached) cache[url].data = response.data\n              setData(response.data)\n              setLoading(false)\n            }\n          })\n          .catch((error) => {\n            if (!unmounted) {\n              console.log(error) // DEV\n              setError(new Error(error))\n              setLoading(false)\n            }\n          })\n      }\n    }\n    return () => {\n      unmounted = true\n      if (source) source.cancel('Cancelling in cleanup')\n    }\n  }, [url])\n\n  return [ data, loading, error ]\n}\n\nexport default useFetch\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\nimport { useState, useEffect } from 'react'\nimport PLYLoader from 'common/thiers/PLYLoader'\nimport * as THREE from 'three'\n\nconst enhancedTHREE = PLYLoader(THREE)\nconst cache = {}\nexport const loader = new enhancedTHREE.PLYLoader()\n\nfunction loadAsync (url) {\n  return new Promise((resolve, reject) => {\n    loader.load(\n      url,\n      (geometry) => {\n        resolve(geometry)\n      },\n      () => {},\n      (err) => {\n        reject(new Error(err))\n      }\n    )\n  })\n}\n\nfunction useFetch3dObject (url, cached = true) {\n  const cachedData = (cached && cache[url])\n  const [error, setError] = useState(null)\n  const [loading, setLoading] = useState(!!cachedData || true)\n  const [data, setData] = useState(!!cachedData)\n\n  useEffect(() => {\n    let unmounted = false\n    if (url) {\n      if (cached && cache[url]) {\n        setData(cache[url])\n      } else {\n        (async () => {\n          if (!unmounted) {\n            setData(null)\n            setLoading(true)\n            try {\n              const data = await loadAsync(url)\n              if (cached) cache[url] = data\n              setData(data)\n            } catch (e) {\n              setError(e)\n            }\n            setLoading(false)\n          }\n        })()\n      }\n    }\n    return () => {\n      unmounted = true\n    }\n  }, [url])\n\n  return [ data, loading, error ]\n}\n\nexport default useFetch3dObject\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\n/* eslint-disable */\nexport default (THREE) => {\n  THREE.PLYLoader = function (manager) {\n    this.manager = (manager !== undefined) ? manager : THREE.DefaultLoadingManager\n\n    this.propertyNameMapping = {}\n  }\n\n  THREE.PLYLoader.prototype = {\n\n    constructor: THREE.PLYLoader,\n\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this\n\n      var loader = new THREE.FileLoader(this.manager)\n      loader.setPath(this.path)\n      loader.setResponseType('arraybuffer')\n      loader.load(url, function (text) {\n        onLoad(scope.parse(text))\n      }, onProgress, onError)\n    },\n\n    setPath: function (value) {\n      this.path = value\n      return this\n    },\n\n    setPropertyNameMapping: function (mapping) {\n      this.propertyNameMapping = mapping\n    },\n\n    parse: function (data) {\n      function parseHeader (data) {\n        var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/\n        var headerText = ''\n        var headerLength = 0\n        var result = patternHeader.exec(data)\n\n        if (result !== null) {\n          headerText = result[ 1 ]\n          headerLength = result[ 0 ].length\n        }\n\n        var header = {\n          comments: [],\n          elements: [],\n          headerLength: headerLength\n        }\n\n        var lines = headerText.split('\\n')\n        var currentElement\n        var lineType, lineValues\n\n        function makePKYElementProperty (propertValues, propertyNameMapping) {\n          var property = { type: propertValues[ 0 ] }\n\n          if (property.type === 'list') {\n            property.name = propertValues[ 3 ]\n            property.countType = propertValues[ 1 ]\n            property.itemType = propertValues[ 2 ]\n          } else {\n            property.name = propertValues[ 1 ]\n          }\n\n          if (property.name in propertyNameMapping) {\n            property.name = propertyNameMapping[ property.name ]\n          }\n\n          return property\n        }\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[ i ]\n          line = line.trim()\n\n          if (line === '') continue\n\n          lineValues = line.split(/\\s+/)\n          lineType = lineValues.shift()\n          line = lineValues.join(' ')\n\n          switch (lineType) {\n            case 'format':\n\n              header.format = lineValues[ 0 ]\n              header.version = lineValues[ 1 ]\n\n              break\n\n            case 'comment':\n\n              header.comments.push(line)\n\n              break\n\n            case 'element':\n\n              if (currentElement !== undefined) {\n                header.elements.push(currentElement)\n              }\n\n              currentElement = {}\n              currentElement.name = lineValues[ 0 ]\n              currentElement.count = parseInt(lineValues[ 1 ])\n              currentElement.properties = []\n\n              break\n\n            case 'property':\n\n              currentElement.properties.push(makePKYElementProperty(lineValues, scope.propertyNameMapping))\n\n              break\n\n            default:\n\n              console.log('unhandled', lineType, lineValues)\n          }\n        }\n\n        if (currentElement !== undefined) {\n          header.elements.push(currentElement)\n        }\n\n        return header\n      }\n\n      function parseASCIINumber (n, type) {\n        switch (type) {\n          case 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\n          case 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\n\n            return parseInt(n)\n\n          case 'float': case 'double': case 'float32': case 'float64':\n\n            return parseFloat(n)\n        }\n      }\n\n      function parseASCIIElement (properties, line) {\n        var values = line.split(/\\s+/)\n\n        var element = {}\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[ i ].type === 'list') {\n            var list = []\n            var n = parseASCIINumber(values.shift(), properties[ i ].countType)\n\n            for (var j = 0; j < n; j++) {\n              list.push(parseASCIINumber(values.shift(), properties[ i ].itemType))\n            }\n\n            element[ properties[ i ].name ] = list\n          } else {\n            element[ properties[ i ].name ] = parseASCIINumber(values.shift(), properties[ i ].type)\n          }\n        }\n\n        return element\n      }\n\n      function parseASCII (data, header) {\n        // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        }\n\n        var result\n\n        var patternBody = /end_header\\s([\\s\\S]*)$/\n        var body = ''\n        if ((result = patternBody.exec(data)) !== null) {\n          body = result[ 1 ]\n        }\n\n        var lines = body.split('\\n')\n        var currentElement = 0\n        var currentElementCount = 0\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[ i ]\n          line = line.trim()\n          if (line === '') {\n            continue\n          }\n\n          if (currentElementCount >= header.elements[ currentElement ].count) {\n            currentElement++\n            currentElementCount = 0\n          }\n\n          var element = parseASCIIElement(header.elements[ currentElement ].properties, line)\n\n          handleElement(buffer, header.elements[ currentElement ].name, element)\n\n          currentElementCount++\n        }\n\n        return postProcess(buffer)\n      }\n\n      function postProcess (buffer) {\n        var geometry = new THREE.BufferGeometry()\n\n        // mandatory buffer data\n\n        if (buffer.indices.length > 0) {\n          geometry.setIndex(buffer.indices)\n        }\n\n        geometry.addAttribute('position', new THREE.Float32BufferAttribute(buffer.vertices, 3))\n\n        // optional buffer data\n\n        if (buffer.normals.length > 0) {\n          geometry.addAttribute('normal', new THREE.Float32BufferAttribute(buffer.normals, 3))\n        }\n\n        if (buffer.uvs.length > 0) {\n          geometry.addAttribute('uv', new THREE.Float32BufferAttribute(buffer.uvs, 2))\n        }\n\n        if (buffer.colors.length > 0) {\n          geometry.addAttribute('color', new THREE.Float32BufferAttribute(buffer.colors, 3))\n        }\n\n        if (buffer.faceVertexUvs.length > 0) {\n          geometry = geometry.toNonIndexed()\n          geometry.addAttribute('uv', new THREE.Float32BufferAttribute(buffer.faceVertexUvs, 2))\n        }\n\n        geometry.computeBoundingSphere()\n\n        return geometry\n      }\n\n      function handleElement (buffer, elementName, element) {\n        if (elementName === 'vertex') {\n          buffer.vertices.push(element.x, element.y, element.z)\n\n          if ('nx' in element && 'ny' in element && 'nz' in element) {\n            buffer.normals.push(element.nx, element.ny, element.nz)\n          }\n\n          if ('s' in element && 't' in element) {\n            buffer.uvs.push(element.s, element.t)\n          }\n\n          if ('red' in element && 'green' in element && 'blue' in element) {\n            buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0)\n          }\n        } else if (elementName === 'face') {\n          var vertex_indices = element.vertex_indices || element.vertex_index // issue #9338\n          var texcoord = element.texcoord\n\n          if (vertex_indices.length === 3) {\n            buffer.indices.push(vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ])\n\n            if (texcoord && texcoord.length === 6) {\n              buffer.faceVertexUvs.push(texcoord[ 0 ], texcoord[ 1 ])\n              buffer.faceVertexUvs.push(texcoord[ 2 ], texcoord[ 3 ])\n              buffer.faceVertexUvs.push(texcoord[ 4 ], texcoord[ 5 ])\n            }\n          } else if (vertex_indices.length === 4) {\n            buffer.indices.push(vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ])\n            buffer.indices.push(vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ])\n          }\n        }\n      }\n\n      function binaryRead (dataview, at, type, little_endian) {\n        switch (type) {\n          // corespondences for non-specific length types here match rply:\n          case 'int8':\t\tcase 'char':\t return [ dataview.getInt8(at), 1 ]\n          case 'uint8':\t\tcase 'uchar':\t return [ dataview.getUint8(at), 1 ]\n          case 'int16':\t\tcase 'short':\t return [ dataview.getInt16(at, little_endian), 2 ]\n          case 'uint16':\tcase 'ushort': return [ dataview.getUint16(at, little_endian), 2 ]\n          case 'int32':\t\tcase 'int':\t\t return [ dataview.getInt32(at, little_endian), 4 ]\n          case 'uint32':\tcase 'uint':\t return [ dataview.getUint32(at, little_endian), 4 ]\n          case 'float32': case 'float':\t return [ dataview.getFloat32(at, little_endian), 4 ]\n          case 'float64': case 'double': return [ dataview.getFloat64(at, little_endian), 8 ]\n        }\n      }\n\n      function binaryReadElement (dataview, at, properties, little_endian) {\n        var element = {}\n        var result; var read = 0\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[ i ].type === 'list') {\n            var list = []\n\n            result = binaryRead(dataview, at + read, properties[ i ].countType, little_endian)\n            var n = result[ 0 ]\n            read += result[ 1 ]\n\n            for (var j = 0; j < n; j++) {\n              result = binaryRead(dataview, at + read, properties[ i ].itemType, little_endian)\n              list.push(result[ 0 ])\n              read += result[ 1 ]\n            }\n\n            element[ properties[ i ].name ] = list\n          } else {\n            result = binaryRead(dataview, at + read, properties[ i ].type, little_endian)\n            element[ properties[ i ].name ] = result[ 0 ]\n            read += result[ 1 ]\n          }\n        }\n\n        return [ element, read ]\n      }\n\n      function parseBinary (data, header) {\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        }\n\n        var little_endian = (header.format === 'binary_little_endian')\n        var body = new DataView(data, header.headerLength)\n        var result; var loc = 0\n\n        for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n          for (var currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount++) {\n            result = binaryReadElement(body, loc, header.elements[ currentElement ].properties, little_endian)\n            loc += result[ 1 ]\n            var element = result[ 0 ]\n\n            handleElement(buffer, header.elements[ currentElement ].name, element)\n          }\n        }\n\n        return postProcess(buffer)\n      }\n\n      //\n\n      var geometry\n      var scope = this\n\n      if (data instanceof ArrayBuffer) {\n        var text = THREE.LoaderUtils.decodeText(new Uint8Array(data))\n        var header = parseHeader(text)\n\n        geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header)\n      } else {\n        geometry = parseASCII(data, parseHeader(data))\n      }\n\n      return geometry\n    }\n\n  }\n\n  return THREE\n}\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\nimport { first, filter } from 'lodash'\n\nexport function chain (fns, values) {\n  return fns.reduce((p, c) => {\n    return c(p)\n  }, values)\n}\n\nexport function ifNotNil (fn) {\n  return function (...args) {\n    if (filter(args, [null, undefined, false]).length) {\n      return fn(...args)\n    } else {\n      return args.length === 1\n        ? first(args)\n        : args\n    }\n  }\n}\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\n\nexport const serverURL = process.env.NODE_ENV === 'production'\n  ? ''\n  : (process.env.REACT_APP_API_URL || 'http://localhost:5000')\n\nexport const scansURI = serverURL + '/scans'\nexport const scansURIQuery = (search) => `${scansURI}${search ? `?filterQuery=${search}` : ''}`\nexport const getScanFile = (id, path) => serverURL + '/files/' + id + '/' + path\nexport const getFile = (path) => serverURL + path\nexport const getScanURI = (id) => serverURL + '/scans/' + id\nexport const getScanPhotoURI = (path) => serverURL + path\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\nimport { orderBy } from 'natural-orderby'\nimport * as THREE from 'three'\nimport { last } from 'lodash'\n\nimport { getScanPhotoURI } from 'common/api'\n\nconst imgLoader = new THREE.TextureLoader()\nimgLoader.crossOrigin = 'Anonymous'\n\nexport const relativeScanPhotoURIEnhancer = (scan) => {\n  return {\n    ...scan,\n    camera: {\n      ...scan.camera,\n      poses: scan.camera.poses.map((d) => {\n        return {\n          ...d,\n          photoUri: getScanPhotoURI(d.photoUri)\n        }\n      })\n    }\n  }\n}\n\nexport const relativeScansPhotoURIEnhancer = (scans) => {\n  return scans.map((d) => {\n    return {\n      ...d,\n      thumbnailUri: getScanPhotoURI(d.thumbnailUri)\n    }\n  })\n}\n\nexport const relativeScansFilesURIEnhancer = (scans) => {\n  return scans.map((d) => {\n    return {\n      ...d,\n      metadata: {\n        ...d.metadata,\n        files: {\n          archive: getScanPhotoURI(d.metadata.files.archive),\n          metadatas: getScanPhotoURI(d.metadata.files.metadatas)\n        }\n      }\n    }\n  })\n}\n\nexport const relativeScanFilesURIEnhancer = (scan) => {\n  return {\n    ...scan,\n    metadata: {\n      ...scan.metadata,\n      files: {\n        archive: getScanPhotoURI(scan.metadata.files.archive),\n        metadatas: getScanPhotoURI(scan.metadata.files.metadatas)\n      }\n    }\n  }\n}\n\nexport const forgeCameraPointsEnhancer = (scan) => {\n  const poses = scan.camera.poses\n  let index = 0\n\n  return {\n    ...scan,\n    camera: {\n      ...scan.camera,\n      poses: orderBy(\n        poses,\n        (d) => d.photoUri\n      ).map((point) => {\n        const m3rotation = new THREE.Matrix3()\n        m3rotation.set(\n          ...point.rotmat[0],\n          ...point.rotmat[1],\n          ...point.rotmat[2]\n        )\n        m3rotation.transpose()\n        m3rotation.multiplyScalar(-1)\n\n        const v3position = new THREE.Vector3(\n          point.tvec[0],\n          point.tvec[1],\n          point.tvec[2]\n        ).applyMatrix3(m3rotation)\n\n        function createM4Rot (rotmat) {\n          const m4rotation = new THREE.Matrix4()\n          m4rotation.set(\n            ...point.rotmat[0], 0,\n            ...point.rotmat[1], 0,\n            ...point.rotmat[2], 0,\n            0, 0, 0, 1\n          )\n          return m4rotation\n        }\n\n        const objM4rotation = createM4Rot()\n        const objT = new THREE.Matrix4().makeRotationX(-Math.PI / 2)\n        objM4rotation.transpose()\n        objM4rotation.multiply(objT)\n\n        const vueM4rotation = createM4Rot()\n        const vueT = new THREE.Matrix4().makeRotationX(-Math.PI)\n        vueM4rotation.transpose()\n        vueM4rotation.multiply(vueT)\n\n        return {\n          index: index++,\n          id: point.photoUri,\n          fileName: last(point.photoUri.split('/')),\n          ...point,\n          v3position,\n          objM4rotation,\n          vueM4rotation\n        }\n      })\n    }\n  }\n}\n\nexport const forgeImageSetEnhancer = (imageSet) => {\n  return imageSet.map((d) => ({ path: d, texture: imgLoader.load(d) }))\n}\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\nimport { useMemo } from 'react'\n\nimport useReactRouter from 'use-react-router'\n\nimport useFetch from 'rd/tools/hooks/fetch'\nimport useAccessor from 'rd/tools/hooks/accessor'\nimport useFetch3dObject from 'rd/tools/hooks/fetch3dObject'\nimport { chain } from 'rd/tools/enhancers'\n\nimport { scansURIQuery, getScanFile, getFile, getScanURI } from 'common/api'\n\nimport { sortingMethods } from './reducer'\n\nimport {\n  relativeScansPhotoURIEnhancer,\n  relativeScansFilesURIEnhancer,\n  relativeScanPhotoURIEnhancer,\n  forgeCameraPointsEnhancer,\n  relativeScanFilesURIEnhancer,\n  forgeImageSetEnhancer\n} from './enhancers'\n\nexport function useScan () {\n  /**\n    This is a hook used to get info on a scan. For more information\n    on the exact structure of a scan, check out the REST API of\n    <a href='https://github.com/romi/plantdb'>plantdb</a>.\n   */\n  const { match } = useReactRouter()\n  const selectedId = match.params.scanId\n  const [scanData] = useFetch(getScanURI(selectedId), true)\n\n  const enhancedScan = useMemo(\n    () => {\n      if (scanData) {\n        return chain([\n          relativeScanFilesURIEnhancer,\n          relativeScanPhotoURIEnhancer,\n          forgeCameraPointsEnhancer\n        ], scanData)\n      }\n    },\n    [scanData]\n  )\n\n  return [enhancedScan]\n}\n\nexport function useImageSet (id) {\n  const { match } = useReactRouter()\n  const selectedId = match.params.scanId\n  const [fileset] = useFetch(getScanFile(selectedId, 'files.json'))\n  const enhancedSet = useMemo(() => {\n    if (!fileset) return null\n    const imageSet = fileset.filesets.find((d) => d.id.toLowerCase().match(id))\n    if (!imageSet) return null\n    return forgeImageSetEnhancer(imageSet.files\n      .map((d) => getScanFile(selectedId, imageSet.id + '/' + d.file)))\n  }, [selectedId, id, fileset])\n  return enhancedSet\n}\n\nexport function useFile (id, file = null, options = {}) {\n  /**\n    This hook allows loading any file from a scan.\n\n    - id: The id (string) of the fileset where the file is located. Check\n      out the doc of plantdb for more info on filesets. The\n      string doesn't need to been the exact name of the set, but it\n      should be at least a substring of the set id.\n    - file: id of the file to load (usually the file name without the\n        extension). The full file name can be written with the right options.\n        If no file is provided, the fileset in its entierety will be returned.\n    - options: Different options that modify the behavior of the hook.\n      possible options are:\n      <ul>\n      <li>\n        metadata: if true, instead of the fileset id, search for the file in the\n        metadata folder of the scan.\n      </li>\n      <li>\n        rawFileName: if true, the file name is a full file name (exact name with\n        extension).\n      </li>\n      </ul>\n  */\n  const { match } = useReactRouter()\n  const selectedId = match.params.scanId\n  const [files] = useFetch(getScanFile(selectedId, 'files.json'))\n\n  const path = useMemo(() => {\n    if (!files) return\n    const set = files.filesets.find((d) => d.id.match(id))\n    if (file && set) {\n      return getScanFile(selectedId,\n        (options.metadata ? 'metadata/' : '') +\n          set.id + '/' +\n          (options.rawFileName ? file : set.files.find((d) => d.file.match(file)).file))\n    }\n    return set\n  }, [id, file, files, selectedId, options])\n  return [useFetch(path), path]\n}\n\nexport function useSegmentedPointCloud () {\n  const [[pointCloud]] = use3dFile('SegmentedPointCloud', 'SegmentedPointCloud')\n  const [[segmentation]] = useFile('SegmentedPointCloud',\n    'SegmentedPointCloud.json', { metadata: true, rawFileName: true })\n  return [pointCloud, segmentation]\n}\n\nexport function use3dFile (id, file = null, options = {}) {\n  /**\n   Hook to load a 3D file form a scan (usually .ply). See\n    the useFile hook for info on the parameters.\n   */\n  const [, path] = useFile(id, file, options)\n  return [useFetch3dObject(path), path]\n}\n\nexport function useScanFiles (scan) {\n  /**\n    Hook to load the mesh and pointCloud ply files from a scan.\n\n    - scan: An object representing a scan (see the useScan hook).\n   */\n  return [\n    useFetch3dObject(scan && (getFile(scan.filesUri.mesh))),\n    useFetch3dObject(scan && (getFile(scan.filesUri.pointCloud))),\n    useFetch3dObject(scan && (getFile(scan.filesUri.pcdGroundTruth)))\n  ]\n}\n\nexport function useScans (search) {\n  /**\n   Hook to load all scans the server has. For more detail on the\n    format of the returned object, check out the REST API at the\n    <a href='https://github.com/romi/plantdb'> plantdb repository </a>.\n\n   - search: A string used to filter the scans. The filtering is made\n    server-side.\n   */\n  const [scans] = useFetch(scansURIQuery(search), false)\n\n  const enhancedScans = useMemo(\n    () => {\n      if (scans) {\n        return chain([\n          relativeScansPhotoURIEnhancer,\n          relativeScansFilesURIEnhancer\n        ], scans)\n      }\n    },\n    [scans]\n  )\n\n  return [enhancedScans]\n}\n\nexport const useSearchQuery = useAccessor(\n  [\n    (state) => {\n      return state.scans.searchQuery\n    }\n  ],\n  [\n    (value) => ({\n      type: 'SET_SEARCH_QUERY',\n      value\n    })\n  ]\n)\n\nexport const useSorting = useAccessor(\n  [\n    (state) => {\n      return state.scans.sorting\n    },\n    (state) => [\n      ...sortingMethods.map((d) => {\n        return d.label !== state.scans.sorting.label\n          ? d\n          : state.scans.sorting\n      })\n    ]\n  ],\n  [\n    (value) => ({\n      type: 'SET_SORTING',\n      value\n    })\n  ]\n)\n\nexport const useSortingMethod = useAccessor(\n  [\n    (state) => {\n      return state.scans.sorting || 'date'\n    }\n  ],\n  [\n    (value) => ({\n      type: 'SET_SORTING',\n      value\n    })\n  ]\n)\n\nexport const useFiltering = useAccessor(\n  [\n    (state) => {\n      return state.scans.filtering\n    }\n  ],\n  [\n    (value) => ({\n      type: 'SET_FILTERING',\n      value\n    })\n  ]\n)\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\nexport const sortingMethods = [\n  {\n    label: 'name',\n    method: 'asc',\n    defaultMethod: 'asc',\n    type: 'natural'\n  },\n  {\n    label: 'species',\n    method: 'asc',\n    defaultMethod: 'asc',\n    type: 'natural'\n  },\n  {\n    label: 'environment',\n    method: 'asc',\n    defaultMethod: 'asc',\n    type: 'natural'\n  },\n  {\n    label: 'date',\n    method: 'desc',\n    defaultMethod: 'desc',\n    type: 'date'\n  }\n]\n\nexport const initialState = {\n  searchQuery: null,\n  sorting: sortingMethods.find((d) => d.label === 'date'),\n  filtering: {}\n}\n\nexport default function settingsReducer (state = initialState, action) {\n  switch (action.type) {\n    case 'SET_SEARCH_QUERY':\n      return {\n        ...state,\n        searchQuery: action.value\n      }\n    case 'SET_SORTING':\n      return {\n        ...state,\n        sorting: action.value\n      }\n    case 'SET_FILTERING':\n      return {\n        ...state,\n        filtering: action.value\n      }\n    default:\n      return state\n  }\n}\n","/*\n\nPlant 3D Explorer: An browser application for 3D scanned\nplants.\n\nCopyright (C) 2019-2020 Sony Computer Science Laboratories\n              & Centre national de la recherche scientifique (CNRS)\n\nAuthors:\nNicolas Forestier, Ludovic Riffault, Léo Gourven, Benoit Lucet (DataVeyes)\nTimothée Wintz, Peter Hanappe (Sony CSL)\nFabrice Besnard (CNRS)\n\nThis program is free software: you can redistribute it and/or\nmodify it under the terms of the GNU Affero General Public\nLicense as published by the Free Software Foundation, either\nversion 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nAffero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public\nLicense along with this program.  If not, see\n<https://www.gnu.org/licenses/>.\n\n*/\nimport { useCallback } from 'react'\nimport { useDispatch, useMappedState } from 'redux-react-hook'\n\nexport default function accessor (selectors = [], actions = []) {\n  return (props) => {\n    const dispatch = useDispatch()\n    return [\n      ...(\n        selectors.map((selector) => {\n          return useMappedState(\n            useCallback(\n              (state) => selector(state, props),\n              []\n            )\n          )\n        })\n      ),\n      ...(\n        actions.map((action) => {\n          return useCallback(\n            (value) => dispatch(action(value)),\n            []\n          )\n        })\n      )\n    ]\n  }\n}\n"],"sourceRoot":""}